{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, retry, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductsService = /*#__PURE__*/(() => {\n  class ProductsService {\n    constructor(http) {\n      this.http = http; // Endpoint\n\n      this.basePath = 'http://localhost:3000/products';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    } // API Error Handling\n\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // Default error handling\n        console.log(`An error occurred: ${error.error.message} `);\n      } else {\n        // Unsuccessful Response Error Code returned from Backend\n        console.error(`Backend returned code ${error.status}, body was: ${error.error}`);\n      } // Return Observable with Error Message to Client\n\n\n      return throwError(() => new Error('Something happened with request, please try again later'));\n    } // Create Student\n\n\n    create(item) {\n      return this.http.post(this.basePath, JSON.stringify(item), this.httpOptions).pipe(retry(2), catchError(this.handleError));\n    } // Get Student by id\n\n\n    getById(id) {\n      return this.http.get(`${this.basePath}/${id}`, this.httpOptions).pipe(retry(2), catchError(this.handleError));\n    }\n\n    getByWholesalerId(id) {\n      return this.http.get(`${this.basePath}/?wholesalerId=${id}`, this.httpOptions).pipe(retry(2), catchError(this.handleError));\n    } // Get All\n\n\n    getAll() {\n      return this.http.get(this.basePath, this.httpOptions).pipe(retry(2), catchError(this.handleError));\n    } // Update\n\n\n    update(id, item) {\n      return this.http.put(`${this.basePath}/${id}`, JSON.stringify(item), this.httpOptions).pipe(retry(2), catchError(this.handleError));\n    } // Delete\n\n\n    delete(id) {\n      return this.http.delete(`${this.basePath}/${id}`, this.httpOptions).pipe(retry(2), catchError(this.handleError));\n    }\n\n  }\n\n  ProductsService.ɵfac = function ProductsService_Factory(t) {\n    return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProductsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductsService,\n    factory: ProductsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductsService;\n})();","map":null,"metadata":{},"sourceType":"module"}